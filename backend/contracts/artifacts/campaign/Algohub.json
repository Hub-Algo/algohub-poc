{
  "hints": {
    "createApplication(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setVipStatus(account,bool,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createCampaign(asset,asset,asset,uint64,uint64,uint64,uint64,uint64,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerAsVoter(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unregisterAsVoter(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAllCampaignApps()uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVotersDetails()(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVotePower(account,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVotingPeriod()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTotalVoters()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVipStatus(account)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVoteAsa(asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "algohubCampaigns": {
          "type": "bytes",
          "key": "algohubCampaigns"
        },
        "votersAsaId": {
          "type": "uint64",
          "key": "votersAsaId"
        },
        "algoToVoteRation": {
          "type": "uint64",
          "key": "algoToVoteRation"
        },
        "votingPeriod": {
          "type": "uint64",
          "key": "votingPeriod"
        },
        "vipVoteWeight": {
          "type": "uint64",
          "key": "vipVoteWeight"
        },
        "totalVotes": {
          "type": "uint64",
          "key": "totalVotes"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Algohub",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "algoToVoteRatio",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "vipVoteWeight",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "votingPeriod",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "voteAsaTotal",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "setVipStatus",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          },
          {
            "name": "isVip",
            "type": "bool",
            "desc": ""
          },
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createCampaign",
        "args": [
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "idoAsa",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "buyAsa",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "maxBuyCap",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "softCap",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "hardCap",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "duration",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "metadataUrl",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "registerAsVoter",
        "args": [
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "unregisterAsVoter",
        "args": [
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getAllCampaignApps",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64[]",
          "desc": ""
        }
      },
      {
        "name": "getVotersDetails",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": ""
        }
      },
      {
        "name": "getVotePower",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          },
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getVotingPeriod",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getTotalVoters",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getVipStatus",
        "args": [
          {
            "name": "account",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "bool",
          "desc": ""
        }
      },
      {
        "name": "getVoteAsa",
        "args": [
          {
            "name": "voteAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      }
    ]
  }
}