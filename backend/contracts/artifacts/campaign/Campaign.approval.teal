#pragma version 9

// This TEAL was generated by TEALScript v0.61.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(application)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_createApplication:
	// algohubApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute createApplication(application)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:59
	// this.algohub.value = algohubApp
	byte 0x616c676f687562 // "algohub"
	frame_dig -1 // algohubApp: application
	app_global_put

	// contracts/campaign/campaign.algo.ts:60
	// this.votersAsaId.value = Asset.zeroIndex
	byte 0x766f746572734173614964 // "votersAsaId"
	int 0
	app_global_put

	// contracts/campaign/campaign.algo.ts:61
	// this.idoAsaId.value = Asset.zeroIndex
	byte 0x69646f4173614964 // "idoAsaId"
	int 0
	app_global_put

	// contracts/campaign/campaign.algo.ts:62
	// this.investmentAsaId.value = Asset.zeroIndex
	byte 0x696e766573746d656e744173614964 // "investmentAsaId"
	int 0
	app_global_put

	// contracts/campaign/campaign.algo.ts:63
	// this.isApprovedCampaign.value = false
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// ========================
// ==== Private Methods ===
// ========================
expandOpcodeBugdet:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:70
	// sendMethodCall<[], void>({
	//       applicationID: this.algohub.value,
	//       name: 'expandOpcodeBudget',
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "expandOpcodeBudget()void"
	itxn_field ApplicationArgs

	// contracts/campaign/campaign.algo.ts:71
	// applicationID: this.algohub.value
	byte 0x616c676f687562 // "algohub"
	app_global_get
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

isApproved:
	proto 0 1

	// if0_condition
	// contracts/campaign/campaign.algo.ts:77
	// !this.isApprovedCampaign.value
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	app_global_get
	int 0
	getbit
	!
	bz if0_end

	// if0_consequent
	// contracts/campaign/campaign.algo.ts:79
	// return true;
	int 1
	retsub

if0_end:
	// contracts/campaign/campaign.algo.ts:81
	// return this.isApprovedCampaign.value;
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	app_global_get
	int 0
	getbit
	retsub

optInToAsa:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:85
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: asaToOptIn,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:86
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:87
	// xferAsset: asaToOptIn
	frame_dig -1 // asaToOptIn: asset
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:88
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

convertToAsaAmount:
	proto 2 1

	// if1_condition
	// contracts/campaign/campaign.algo.ts:93
	// asaToCovertTo === this.investmentAsaId.value
	frame_dig -2 // asaToCovertTo: asset
	byte 0x696e766573746d656e744173614964 // "investmentAsaId"
	app_global_get
	==
	bz if1_end

	// if1_consequent
	// contracts/campaign/campaign.algo.ts:93
	// return purchaseAmount / this.campaign.value.conversionRate;
	frame_dig -1 // purchaseAmount: uint64
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 0 8
	btoi
	/
	retsub

if1_end:
	// if2_condition
	// contracts/campaign/campaign.algo.ts:94
	// asaToCovertTo === this.idoAsaId.value
	frame_dig -2 // asaToCovertTo: asset
	byte 0x69646f4173614964 // "idoAsaId"
	app_global_get
	==
	bz if2_end

	// if2_consequent
	// contracts/campaign/campaign.algo.ts:94
	// return purchaseAmount * this.campaign.value.conversionRate;
	frame_dig -1 // purchaseAmount: uint64
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 0 8
	btoi
	*
	retsub

if2_end:
	// contracts/campaign/campaign.algo.ts:95
	// return 0;
	int 0
	retsub

// createCampaign(string,uint64,uint64,uint64,uint64,uint64,uint64,asset,asset,asset,account)void
abi_route_createCampaign:
	// metadataUrl: string
	txna ApplicationArgs 11
	extract 2 0

	// duration: uint64
	txna ApplicationArgs 10
	btoi

	// votingPeriod: uint64
	txna ApplicationArgs 9
	btoi

	// maxTotalInvestment: uint64
	txna ApplicationArgs 8
	btoi

	// minTotalInvestment: uint64
	txna ApplicationArgs 7
	btoi

	// maxInvestmentPerAccount: uint64
	txna ApplicationArgs 6
	btoi

	// conversionRate: uint64
	txna ApplicationArgs 5
	btoi

	// investmentAsa: asset
	txna ApplicationArgs 4
	btoi
	txnas Assets

	// idoAsa: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// votersAsa: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// adminAccount: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute createCampaign(string,uint64,uint64,uint64,uint64,uint64,uint64,asset,asset,asset,account)void
	callsub createCampaign
	int 1
	return

createCampaign:
	proto 11 0

	// contracts/campaign/campaign.algo.ts:111
	// assert(!this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/campaign/campaign.algo.ts:112
	// this.admin.value = adminAccount
	byte 0x61646d696e // "admin"
	frame_dig -1 // adminAccount: account
	app_global_put

	// contracts/campaign/campaign.algo.ts:114
	// this.votersAsaId.value = votersAsa
	byte 0x766f746572734173614964 // "votersAsaId"
	frame_dig -2 // votersAsa: asset
	app_global_put

	// contracts/campaign/campaign.algo.ts:115
	// this.idoAsaId.value = idoAsa
	byte 0x69646f4173614964 // "idoAsaId"
	frame_dig -3 // idoAsa: asset
	app_global_put

	// contracts/campaign/campaign.algo.ts:116
	// this.investmentAsaId.value = investmentAsa
	byte 0x696e766573746d656e744173614964 // "investmentAsaId"
	frame_dig -4 // investmentAsa: asset
	app_global_put

	// contracts/campaign/campaign.algo.ts:117
	// this.optInToAsa(idoAsa)
	frame_dig -3 // idoAsa: asset
	callsub optInToAsa

	// contracts/campaign/campaign.algo.ts:118
	// this.optInToAsa(investmentAsa)
	frame_dig -4 // investmentAsa: asset
	callsub optInToAsa

	// contracts/campaign/campaign.algo.ts:120
	// this.campaign.value = {
	//       conversionRate: conversionRate,
	//       maxInvestmentPerAccount: maxInvestmentPerAccount * 10 ** investmentAsa.decimals,
	//       minTotalInvestment: minTotalInvestment * 10 ** investmentAsa.decimals,
	//       maxTotalInvestment: maxTotalInvestment * 10 ** investmentAsa.decimals,
	//       investedAmount: 0,
	//       withdrawnAmount: 0,
	//       startTime: globals.latestTimestamp + votingPeriod,
	//       endTime: globals.latestTimestamp + votingPeriod + duration,
	//       metadataUrl: metadataUrl,
	//     }
	byte 0x63616d706169676e // "campaign"
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0042 // initial head offset
	frame_dig -5 // conversionRate: uint64
	itob
	callsub process_static_tuple_element
	frame_dig -6 // maxInvestmentPerAccount: uint64
	int 10
	frame_dig -4 // investmentAsa: asset
	asset_params_get AssetDecimals
	assert
	exp
	*
	itob
	callsub process_static_tuple_element
	frame_dig -7 // minTotalInvestment: uint64
	int 10
	frame_dig -4 // investmentAsa: asset
	asset_params_get AssetDecimals
	assert
	exp
	*
	itob
	callsub process_static_tuple_element
	frame_dig -8 // maxTotalInvestment: uint64
	int 10
	frame_dig -4 // investmentAsa: asset
	asset_params_get AssetDecimals
	assert
	exp
	*
	itob
	callsub process_static_tuple_element
	byte 0x0000000000000000
	callsub process_static_tuple_element
	byte 0x0000000000000000
	callsub process_static_tuple_element
	global LatestTimestamp
	frame_dig -9 // votingPeriod: uint64
	+
	itob
	callsub process_static_tuple_element
	global LatestTimestamp
	frame_dig -9 // votingPeriod: uint64
	+
	frame_dig -10 // duration: uint64
	+
	itob
	callsub process_static_tuple_element
	frame_dig -11 // metadataUrl: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	app_global_put
	retsub

// setVestingSchedule(uint64[],uint64[])void
abi_route_setVestingSchedule:
	// vestingDurations: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// vestingPercentages: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute setVestingSchedule(uint64[],uint64[])void
	callsub setVestingSchedule
	int 1
	return

setVestingSchedule:
	proto 2 0

	// contracts/campaign/campaign.algo.ts:134
	// assert(!this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/campaign/campaign.algo.ts:135
	// assert(vestingDurations.length === vestingPercentages.length)
	frame_dig -2 // vestingDurations: uint64[]
	len
	int 8
	/
	frame_dig -1 // vestingPercentages: uint64[]
	len
	int 8
	/
	==
	assert

	// contracts/campaign/campaign.algo.ts:136
	// this.vestingSchedule.value = {
	//       vestingPeriods: vestingDurations.length,
	//       percentages: vestingPercentages,
	//       durations: vestingDurations,
	//     }
	byte 0x76657374696e675363686564756c65 // "vestingSchedule"
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000c // initial head offset
	frame_dig -2 // vestingDurations: uint64[]
	len
	int 8
	/
	itob
	callsub process_static_tuple_element
	frame_dig -1 // vestingPercentages: uint64[]
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // vestingDurations: uint64[]
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	app_global_put
	retsub

// setHypelistedAccount(bool,account)void
abi_route_setHypelistedAccount:
	// isHypelisted: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute setHypelistedAccount(bool,account)void
	callsub setHypelistedAccount
	int 1
	return

setHypelistedAccount:
	proto 2 0

	// contracts/campaign/campaign.algo.ts:144
	// this.hypelist(account).value = isHypelisted
	byte 0x68 // "h"
	frame_dig -1 // account: account
	concat
	frame_dig -2 // isHypelisted: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	box_put
	retsub

// depositIdoAsa(asset,axfer)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_depositIdoAsa:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// idoAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// idoXfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute depositIdoAsa(asset,axfer)void
	callsub depositIdoAsa
	int 1
	return

depositIdoAsa:
	proto 3 0

	// contracts/campaign/campaign.algo.ts:150
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:151
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/campaign/campaign.algo.ts:152
	// idoAsaToTransfer = (this.campaign.value.maxTotalInvestment * 100) / this.campaign.value.conversionRate
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 24 8
	btoi
	int 100
	*
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 0 8
	btoi
	/
	frame_bury -3 // idoAsaToTransfer: uint64

	// contracts/campaign/campaign.algo.ts:153
	// verifyTxn(idoXfer, {
	//       assetAmount: idoAsaToTransfer,
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender,
	//       xferAsset: this.idoAsaId.value,
	//     })
	// verify assetAmount
	frame_dig -1 // idoXfer: axfer
	gtxns AssetAmount
	frame_dig -3 // idoAsaToTransfer: uint64
	==
	assert

	// verify assetReceiver
	frame_dig -1 // idoXfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // idoXfer: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// verify xferAsset
	frame_dig -1 // idoXfer: axfer
	gtxns XferAsset
	byte 0x69646f4173614964 // "idoAsaId"
	app_global_get
	==
	assert
	retsub

// lockApprovedStatus()void
abi_route_lockApprovedStatus:
	// execute lockApprovedStatus()void
	callsub lockApprovedStatus
	int 1
	return

lockApprovedStatus:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:162
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:163
	// assert(this.isApproved())
	callsub isApproved
	assert

	// contracts/campaign/campaign.algo.ts:164
	// assert(!this.isApprovedCampaign.value)
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	app_global_get
	int 0
	getbit
	!
	assert

	// contracts/campaign/campaign.algo.ts:165
	// this.isApprovedCampaign.value = true
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// invest(uint64,asset,axfer)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_invest:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// investmentAmount: uint64
	txna ApplicationArgs 2
	btoi

	// investmentAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// investmentAsaXfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute invest(uint64,asset,axfer)void
	callsub invest
	int 1
	return

invest:
	proto 4 0

	// contracts/campaign/campaign.algo.ts:170
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:171
	// assert(this.isApproved())
	callsub isApproved
	assert

	// contracts/campaign/campaign.algo.ts:173
	// assert(this.campaign.value.endTime > globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 56 8
	btoi
	global LatestTimestamp
	>
	assert

	// contracts/campaign/campaign.algo.ts:175
	// investmentAsaToTransfer = investmentAmount * 10 ** investmentAsa.decimals
	frame_dig -3 // investmentAmount: uint64
	int 10
	frame_dig -2 // investmentAsa: asset
	asset_params_get AssetDecimals
	assert
	exp
	*
	frame_bury -4 // investmentAsaToTransfer: uint64

	// contracts/campaign/campaign.algo.ts:176
	// assert(this.campaign.value.maxInvestmentPerAccount >= investmentAsaToTransfer)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 8 8
	btoi
	frame_dig -4 // investmentAsaToTransfer: uint64
	>=
	assert

	// contracts/campaign/campaign.algo.ts:179
	// assert(this.campaign.value.startTime < globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 48 8
	btoi
	global LatestTimestamp
	<
	assert

	// contracts/campaign/campaign.algo.ts:182
	// assert(this.campaign.value.maxTotalInvestment >= this.campaign.value.investedAmount + investmentAsaToTransfer)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 24 8
	btoi
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 32 8
	btoi
	frame_dig -4 // investmentAsaToTransfer: uint64
	+
	>=
	assert

	// if3_condition
	// contracts/campaign/campaign.algo.ts:184
	// !this.isApprovedCampaign.value
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	app_global_get
	int 0
	getbit
	!
	bz if3_end

	// if3_consequent
	// contracts/campaign/campaign.algo.ts:185
	// this.isApprovedCampaign.value = true
	byte 0x6973417070726f76656443616d706169676e // "isApprovedCampaign"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

if3_end:
	// contracts/campaign/campaign.algo.ts:187
	// verifyTxn(investmentAsaXfer, {
	//       assetAmount: investmentAsaToTransfer,
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender,
	//       xferAsset: this.investmentAsaId.value,
	//     })
	// verify assetAmount
	frame_dig -1 // investmentAsaXfer: axfer
	gtxns AssetAmount
	frame_dig -4 // investmentAsaToTransfer: uint64
	==
	assert

	// verify assetReceiver
	frame_dig -1 // investmentAsaXfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // investmentAsaXfer: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// verify xferAsset
	frame_dig -1 // investmentAsaXfer: axfer
	gtxns XferAsset
	byte 0x696e766573746d656e744173614964 // "investmentAsaId"
	app_global_get
	==
	assert

	// contracts/campaign/campaign.algo.ts:193
	// this.campaign.value.investedAmount = this.campaign.value.investedAmount + investmentAsaToTransfer
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	int 32
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 32 8
	btoi
	frame_dig -4 // investmentAsaToTransfer: uint64
	+
	itob
	replace3
	byte 0x63616d706169676e // "campaign"
	swap
	app_global_put

	// if4_condition
	// contracts/campaign/campaign.algo.ts:195
	// this.investments(this.txn.sender).exists
	byte 0x69 // "i"
	txn Sender
	concat
	box_len
	swap
	pop
	bz if4_else

	// if4_consequent
	// contracts/campaign/campaign.algo.ts:196
	// this.investments(this.txn.sender).value = this.investments(this.txn.sender).value + investmentAsaToTransfer
	byte 0x69 // "i"
	txn Sender
	concat
	byte 0x69 // "i"
	txn Sender
	concat
	box_get
	assert
	btoi
	frame_dig -4 // investmentAsaToTransfer: uint64
	+
	itob
	box_put
	b if4_end

if4_else:
	// contracts/campaign/campaign.algo.ts:198
	// this.investments(this.txn.sender).value = investmentAsaToTransfer
	byte 0x69 // "i"
	txn Sender
	concat
	frame_dig -4 // investmentAsaToTransfer: uint64
	itob
	box_put

if4_end:
	retsub

// claim(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_claim:
	byte 0x; dupn 3 // push empty bytes to fill the stack frame for this subroutine's local variables

	// idoAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute claim(asset)void
	callsub claim
	int 1
	return

claim:
	proto 5 0

	// contracts/campaign/campaign.algo.ts:222
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:224
	// assert(this.isApproved())
	callsub isApproved
	assert

	// contracts/campaign/campaign.algo.ts:225
	// assert(this.campaign.value.endTime < globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 56 8
	btoi
	global LatestTimestamp
	<
	assert

	// contracts/campaign/campaign.algo.ts:226
	// assert(this.investments(this.txn.sender).exists)
	byte 0x69 // "i"
	txn Sender
	concat
	box_len
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:228
	// totalClaimableAmount = (this.investments(this.txn.sender).value * 100) / this.campaign.value.conversionRate
	byte 0x69 // "i"
	txn Sender
	concat
	box_get
	assert
	btoi
	int 100
	*
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 0 8
	btoi
	/
	frame_bury -2 // totalClaimableAmount: uint64

	// contracts/campaign/campaign.algo.ts:229
	// alreadyClaimedAmount = this.claimedAmount(this.txn.sender).exists
	//       ? this.claimedAmount(this.txn.sender).value
	//       : 0
	byte 0x63 // "c"
	txn Sender
	concat
	box_len
	swap
	pop
	bz ternary1_false
	byte 0x63 // "c"
	txn Sender
	concat
	box_get
	assert
	btoi
	b ternary1_end

ternary1_false:
	int 0

ternary1_end:
	frame_bury -3 // alreadyClaimedAmount: uint64

	// contracts/campaign/campaign.algo.ts:233
	// assert(totalClaimableAmount > alreadyClaimedAmount)
	frame_dig -2 // totalClaimableAmount: uint64
	frame_dig -3 // alreadyClaimedAmount: uint64
	>
	assert

	// contracts/campaign/campaign.algo.ts:234
	// totalAmountToClaim = totalClaimableAmount - alreadyClaimedAmount
	frame_dig -2 // totalClaimableAmount: uint64
	frame_dig -3 // alreadyClaimedAmount: uint64
	-
	frame_bury -4 // totalAmountToClaim: uint64

	// contracts/campaign/campaign.algo.ts:236
	// eligibleAmountToClaim = totalAmountToClaim
	frame_dig -4 // totalAmountToClaim: uint64
	frame_bury -5 // eligibleAmountToClaim: uint64

	// contracts/campaign/campaign.algo.ts:237
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.txn.sender,
	//       xferAsset: this.idoAsaId.value,
	//       assetAmount: eligibleAmountToClaim,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:238
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/campaign/campaign.algo.ts:239
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:240
	// xferAsset: this.idoAsaId.value
	byte 0x69646f4173614964 // "idoAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:241
	// assetAmount: eligibleAmountToClaim
	frame_dig -5 // eligibleAmountToClaim: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// if5_condition
	// contracts/campaign/campaign.algo.ts:244
	// this.claimedAmount(this.txn.sender).exists
	byte 0x63 // "c"
	txn Sender
	concat
	box_len
	swap
	pop
	bz if5_else

	// if5_consequent
	// contracts/campaign/campaign.algo.ts:245
	// this.claimedAmount(this.txn.sender).value = this.claimedAmount(this.txn.sender).value + eligibleAmountToClaim
	byte 0x63 // "c"
	txn Sender
	concat
	byte 0x63 // "c"
	txn Sender
	concat
	box_get
	assert
	btoi
	frame_dig -5 // eligibleAmountToClaim: uint64
	+
	itob
	box_put
	b if5_end

if5_else:
	// contracts/campaign/campaign.algo.ts:247
	// this.claimedAmount(this.txn.sender).value = eligibleAmountToClaim
	byte 0x63 // "c"
	txn Sender
	concat
	frame_dig -5 // eligibleAmountToClaim: uint64
	itob
	box_put

if5_end:
	retsub

// withdrawInvestment(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_withdrawInvestment:
	// investmentAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute withdrawInvestment(asset)void
	callsub withdrawInvestment
	int 1
	return

withdrawInvestment:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:255
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:256
	// assert(!this.isApproved())
	callsub isApproved
	!
	assert

	// contracts/campaign/campaign.algo.ts:257
	// assert(this.campaign.value.startTime > globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 48 8
	btoi
	global LatestTimestamp
	>
	assert

	// contracts/campaign/campaign.algo.ts:258
	// assert(this.investments(this.txn.sender).exists)
	byte 0x69 // "i"
	txn Sender
	concat
	box_len
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:260
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.txn.sender,
	//       xferAsset: this.investmentAsaId.value,
	//       assetAmount: this.investments(this.txn.sender).value,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:261
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/campaign/campaign.algo.ts:262
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:263
	// xferAsset: this.investmentAsaId.value
	byte 0x696e766573746d656e744173614964 // "investmentAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:264
	// assetAmount: this.investments(this.txn.sender).value
	byte 0x69 // "i"
	txn Sender
	concat
	box_get
	assert
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// withdrawIdoAsa(asset)void
abi_route_withdrawIdoAsa:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// idoAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute withdrawIdoAsa(asset)void
	callsub withdrawIdoAsa
	int 1
	return

withdrawIdoAsa:
	proto 2 0

	// contracts/campaign/campaign.algo.ts:276
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:277
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/campaign/campaign.algo.ts:278
	// assert(this.campaign.value.endTime < globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 56 8
	btoi
	global LatestTimestamp
	<
	assert

	// if6_condition
	// contracts/campaign/campaign.algo.ts:279
	// this.isApproved()
	callsub isApproved
	bz if6_else

	// if6_consequent
	// contracts/campaign/campaign.algo.ts:280
	// totalUnsoldAmount = this.campaign.value.maxTotalInvestment - this.campaign.value.investedAmount
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 24 8
	btoi
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 32 8
	btoi
	-
	frame_bury -2 // totalUnsoldAmount: uint64

	// contracts/campaign/campaign.algo.ts:281
	// assert(totalUnsoldAmount > 0)
	frame_dig -2 // totalUnsoldAmount: uint64
	int 0
	>
	assert

	// contracts/campaign/campaign.algo.ts:282
	// sendAssetTransfer({
	//         sender: this.app.address,
	//         assetReceiver: this.txn.sender,
	//         xferAsset: idoAsa,
	//         assetAmount: (totalUnsoldAmount * 100) / this.campaign.value.conversionRate,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:283
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/campaign/campaign.algo.ts:284
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:285
	// xferAsset: idoAsa
	frame_dig -1 // idoAsa: asset
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:286
	// assetAmount: (totalUnsoldAmount * 100) / this.campaign.value.conversionRate
	frame_dig -2 // totalUnsoldAmount: uint64
	int 100
	*
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 0 8
	btoi
	/
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b if6_end

if6_else:
	// contracts/campaign/campaign.algo.ts:289
	// sendAssetTransfer({
	//         sender: this.app.address,
	//         assetReceiver: this.txn.sender,
	//         xferAsset: idoAsa,
	//         assetAmount: this.app.address.assetBalance(idoAsa),
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:290
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/campaign/campaign.algo.ts:291
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:292
	// xferAsset: idoAsa
	frame_dig -1 // idoAsa: asset
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:293
	// assetAmount: this.app.address.assetBalance(idoAsa)
	global CurrentApplicationAddress
	frame_dig -1 // idoAsa: asset
	asset_holding_get AssetBalance
	assert
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

if6_end:
	retsub

// withdrawSales(asset)void
abi_route_withdrawSales:
	// investmentAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute withdrawSales(asset)void
	callsub withdrawSales
	int 1
	return

withdrawSales:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:301
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:302
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/campaign/campaign.algo.ts:303
	// assert(this.campaign.value.endTime < globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 56 8
	btoi
	global LatestTimestamp
	<
	assert

	// contracts/campaign/campaign.algo.ts:305
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.txn.sender,
	//       xferAsset: investmentAsa,
	//       assetAmount: this.app.address.assetBalance(investmentAsa),
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:306
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/campaign/campaign.algo.ts:307
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:308
	// xferAsset: investmentAsa
	frame_dig -1 // investmentAsa: asset
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:309
	// assetAmount: this.app.address.assetBalance(investmentAsa)
	global CurrentApplicationAddress
	frame_dig -1 // investmentAsa: asset
	asset_holding_get AssetBalance
	assert
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// vote(asset,bool)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_vote:
	// votersAsa: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// inFavor: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute vote(asset,bool)void
	callsub vote
	int 1
	return

vote:
	proto 2 0

	// contracts/campaign/campaign.algo.ts:315
	// assert(this.campaign.exists)
	txna Applications 0
	byte 0x63616d706169676e // "campaign"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:316
	// assert(this.campaign.value.startTime > globals.latestTimestamp)
	byte 0x63616d706169676e // "campaign"
	app_global_get
	store 0 // full array
	load 0 // full array
	extract 48 8
	btoi
	global LatestTimestamp
	>
	assert

	// contracts/campaign/campaign.algo.ts:317
	// assert(this.txn.sender.assetBalance(this.votersAsaId.value) === 1)
	txn Sender
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/campaign/campaign.algo.ts:319
	// this.votesTotal.value = this.votesTotal.value + 1
	byte 0x766f746573546f74616c // "votesTotal"
	byte 0x766f746573546f74616c // "votesTotal"
	app_global_get
	int 1
	+
	app_global_put

	// if7_condition
	// contracts/campaign/campaign.algo.ts:320
	// inFavor
	frame_dig -1 // inFavor: bool
	bz if7_end

	// if7_consequent
	// contracts/campaign/campaign.algo.ts:321
	// this.votesInFavor.value = this.votesInFavor.value + 1
	byte 0x766f746573496e4661766f72 // "votesInFavor"
	byte 0x766f746573496e4661766f72 // "votesInFavor"
	app_global_get
	int 1
	+
	app_global_put

if7_end:
	retsub

// getAccountTotalInvestment(account)uint64
abi_route_getAccountTotalInvestment:
	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getAccountTotalInvestment(account)uint64
	callsub getAccountTotalInvestment
	int 1
	return

getAccountTotalInvestment:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:326
	// return this.investments(account).value;
	byte 0x69 // "i"
	frame_dig -1 // account: account
	concat
	box_get
	assert
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotes()(uint64,uint64)
abi_route_getVotes:
	// execute getVotes()(uint64,uint64)
	callsub getVotes
	int 1
	return

getVotes:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:330
	// return [this.votesInFavor.value, this.votesTotal.value];
	byte 0x766f746573496e4661766f72 // "votesInFavor"
	app_global_get
	itob
	byte 0x766f746573546f74616c // "votesTotal"
	app_global_get
	itob
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotersAsa()uint64
abi_route_getVotersAsa:
	// execute getVotersAsa()uint64
	callsub getVotersAsa
	int 1
	return

getVotersAsa:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:334
	// return this.votersAsaId.value;
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getIdoAsa()uint64
abi_route_getIdoAsa:
	// execute getIdoAsa()uint64
	callsub getIdoAsa
	int 1
	return

getIdoAsa:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:338
	// return this.idoAsaId.value;
	byte 0x69646f4173614964 // "idoAsaId"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getInvestmentAsa()uint64
abi_route_getInvestmentAsa:
	// execute getInvestmentAsa()uint64
	callsub getInvestmentAsa
	int 1
	return

getInvestmentAsa:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:342
	// return this.investmentAsaId.value;
	byte 0x696e766573746d656e744173614964 // "investmentAsaId"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,string)
abi_route_getCampaign:
	// execute getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,string)
	callsub getCampaign
	int 1
	return

getCampaign:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:346
	// return this.campaign.value;
	byte 0x63616d706169676e // "campaign"
	app_global_get
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVestingSchedule()(uint64,uint64[],uint64[])
abi_route_getVestingSchedule:
	// execute getVestingSchedule()(uint64,uint64[],uint64[])
	callsub getVestingSchedule
	int 1
	return

getVestingSchedule:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:350
	// return this.vestingSchedule.value;
	byte 0x76657374696e675363686564756c65 // "vestingSchedule"
	app_global_get
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(application)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "createCampaign(account,asset,asset,asset,uint64,uint64,uint64,uint64,uint64,uint64,string)void"
	method "setVestingSchedule(uint64[],uint64[])void"
	method "setHypelistedAccount(account,bool)void"
	method "depositIdoAsa(axfer,asset)void"
	method "lockApprovedStatus()void"
	method "invest(axfer,asset,uint64)void"
	method "claim(asset)void"
	method "withdrawInvestment(asset)void"
	method "withdrawIdoAsa(asset)void"
	method "withdrawSales(asset)void"
	method "vote(bool,asset)void"
	method "getAccountTotalInvestment(account)uint64"
	method "getVotes()(uint64,uint64)"
	method "getVotersAsa()uint64"
	method "getIdoAsa()uint64"
	method "getInvestmentAsa()uint64"
	method "getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,string)"
	method "getVestingSchedule()(uint64,uint64[],uint64[])"
	txna ApplicationArgs 0
	match abi_route_createCampaign abi_route_setVestingSchedule abi_route_setHypelistedAccount abi_route_depositIdoAsa abi_route_lockApprovedStatus abi_route_invest abi_route_claim abi_route_withdrawInvestment abi_route_withdrawIdoAsa abi_route_withdrawSales abi_route_vote abi_route_getAccountTotalInvestment abi_route_getVotes abi_route_getVotersAsa abi_route_getIdoAsa abi_route_getInvestmentAsa abi_route_getCampaign abi_route_getVestingSchedule
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub