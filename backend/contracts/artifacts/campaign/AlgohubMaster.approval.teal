#pragma version 9

// This TEAL was generated by TEALScript v0.61.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,uint64)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_createApplication:
	// votingPeriod: uint64
	txna ApplicationArgs 3
	btoi

	// vipVoteWeight: uint64
	txna ApplicationArgs 2
	btoi

	// algoToVoteRatio: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 3 0

	// contracts/campaign/campaign.algo.ts:246
	// this.algoToVoteRation.value = algoToVoteRatio
	byte 0x616c676f546f566f7465526174696f6e // "algoToVoteRation"
	frame_dig -1 // algoToVoteRatio: uint64
	app_global_put

	// contracts/campaign/campaign.algo.ts:247
	// this.vipVoteWeight.value = vipVoteWeight
	byte 0x766970566f7465576569676874 // "vipVoteWeight"
	frame_dig -2 // vipVoteWeight: uint64
	app_global_put

	// contracts/campaign/campaign.algo.ts:248
	// this.votingPeriod.value = votingPeriod
	byte 0x766f74696e67506572696f64 // "votingPeriod"
	frame_dig -3 // votingPeriod: uint64
	app_global_put
	retsub

// ========================
// ==== Private Methods ===
// ========================
doAxfer:
	proto 3 0

	// contracts/campaign/campaign.algo.ts:255
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       xferAsset: asset,
	//       assetAmount: amount,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:256
	// assetReceiver: receiver
	frame_dig -1 // receiver: account
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:257
	// xferAsset: asset
	frame_dig -2 // asset: asset
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:258
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

doOptIn:
	proto 2 0

	// contracts/campaign/campaign.algo.ts:263
	// this.doAxfer(account, asset, 0)
	int 0
	frame_dig -2 // asset: asset
	frame_dig -1 // account: account
	callsub doAxfer
	retsub

// ========================
// ==== Admin Methods ====
// ========================
// bootstrap(uint64)uint64
//
// /// ========================
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// voteAsaTotal: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64)uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 2 0

	// contracts/campaign/campaign.algo.ts:270
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/campaign/campaign.algo.ts:271
	// assert(!this.votersAsaId.exists)
	txna Applications 0
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/campaign/campaign.algo.ts:272
	// votersAsa = sendAssetCreation({
	//       configAssetName: 'AlgoHub Vote',
	//       configAssetUnitName: 'AHV',
	//       configAssetDecimals: 18,
	//       configAssetTotal: voteAsaTotal,
	//       configAssetFreeze: this.app.address,
	//       configAssetClawback: this.app.address,
	//       configAssetReserve: this.app.address,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:273
	// configAssetName: 'AlgoHub Vote'
	byte 0x416c676f48756220566f7465 // "AlgoHub Vote"
	itxn_field ConfigAssetName

	// contracts/campaign/campaign.algo.ts:274
	// configAssetUnitName: 'AHV'
	byte 0x414856 // "AHV"
	itxn_field ConfigAssetUnitName

	// contracts/campaign/campaign.algo.ts:275
	// configAssetDecimals: 18
	int 18
	itxn_field ConfigAssetDecimals

	// contracts/campaign/campaign.algo.ts:276
	// configAssetTotal: voteAsaTotal
	frame_dig -1 // voteAsaTotal: uint64
	itxn_field ConfigAssetTotal

	// contracts/campaign/campaign.algo.ts:277
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// contracts/campaign/campaign.algo.ts:278
	// configAssetClawback: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetClawback

	// contracts/campaign/campaign.algo.ts:279
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -2 // votersAsa: asset

	// contracts/campaign/campaign.algo.ts:281
	// this.votersAsaId.value = votersAsa
	byte 0x766f746572734173614964 // "votersAsaId"
	frame_dig -2 // votersAsa: asset
	app_global_put

	// contracts/campaign/campaign.algo.ts:282
	// this.doOptIn(this.app.address, votersAsa)
	frame_dig -2 // votersAsa: asset
	global CurrentApplicationAddress
	callsub doOptIn

	// contracts/campaign/campaign.algo.ts:283
	// return votersAsa;
	frame_dig -2 // votersAsa: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// setVipStatus(asset,bool,account)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_setVipStatus:
	// votersAsa: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// isVip: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute setVipStatus(asset,bool,account)void
	callsub setVipStatus
	int 1
	return

setVipStatus:
	proto 3 0

	// contracts/campaign/campaign.algo.ts:288
	// assert(this.votersAsaId.exists)
	txna Applications 0
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get_ex
	swap
	pop
	assert

	// Only allow app creator to set Vip status
	// contracts/campaign/campaign.algo.ts:290
	// verifyTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/campaign/campaign.algo.ts:292
	// assert(account.assetBalance(this.votersAsaId.value) === 1)
	frame_dig -1 // account: account
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/campaign/campaign.algo.ts:293
	// this.vipVoters(account).value = isVip
	frame_dig -1 // account: account
	frame_dig -2 // isVip: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// ========================
// ==== Public Methods ====
// ========================
// createCampaign(string,uint64,uint64,uint64,uint64,uint64,asset,asset,account,asset)uint64
//
// // eslint-disable-next-line no-unused-vars
abi_route_createCampaign:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// metadataUrl: string
	txna ApplicationArgs 10
	extract 2 0

	// duration: uint64
	txna ApplicationArgs 9
	btoi

	// hardCap: uint64
	txna ApplicationArgs 8
	btoi

	// softCap: uint64
	txna ApplicationArgs 7
	btoi

	// maxBuyCap: uint64
	txna ApplicationArgs 6
	btoi

	// price: uint64
	txna ApplicationArgs 5
	btoi

	// buyAsa: asset
	txna ApplicationArgs 4
	btoi
	txnas Assets

	// idoAsa: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// adminAccount: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// votersAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute createCampaign(string,uint64,uint64,uint64,uint64,uint64,asset,asset,account,asset)uint64
	callsub createCampaign
	int 1
	return

createCampaign:
	proto 12 0

	// contracts/campaign/campaign.algo.ts:312
	// assert(this.votersAsaId.exists)
	txna Applications 0
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:313
	// sendMethodCall<[], void>({
	//       name: 'createApplication',
	//       clearStateProgram: Campaign.clearProgram(),
	//       approvalProgram: Campaign.approvalProgram(),
	//       globalNumByteSlice: 6,
	//       globalNumUint: 3,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "createApplication()void"
	itxn_field ApplicationArgs

	// contracts/campaign/campaign.algo.ts:315
	// clearStateProgram: Campaign.clearProgram()
	byte b64 CQ==
	itxn_field ClearStateProgram

	// contracts/campaign/campaign.algo.ts:316
	// approvalProgram: Campaign.approvalProgram()
	byte b64 CSADAQAEJgsIY2FtcGFpZ24EFR98dRJpc0FwcHJvdmVkQ2FtcGFpZ24Ldm90ZXJzQXNhSWQFYWRtaW4ACGlkb0FzYUlkCGJ1eUFzYUlkCnZvdGVzVG90YWwMdm90ZXNJbkZhdm9yAQAxGCMNgQYLMRkIjQcDKwAAAAAAAAAAAAADOQCIAAIiQ4oAACsjZycGI2cnByNnKiMnCiNPAlRniYoAASpkI1MUQQACIokqZCNTiYoAASKJigEAsSSyEDIKshSL/7IRI7ISI7IBs4k2GgtXAgA2GgoXNhoJFzYaCBc2GgcXNhoGFzYaBRc2GgQXwDA2GgMXwDA2GgIXwDA2GgEXwByIAAIiQ4oLADYyAChlTEgURCcEi/9nK4v+ZycGi/1nJweL/GcoJwUnBYACADKL+xaIAvqL+haIAvSL+RaIAu6L+BaIAugyB4v3CBaIAt8yB4v3CIv2CBaIAtOL9UkVFlcGAkxQiALTSFBni/2I/0SL/Ij/P4knBTYaARfAMDEWIglJOBAkEkSIAAIiQ4oDADYyAChlTEhEMQAnBGQSRChkNQA0AFcYCBcoZDUANABXAAgXCoz9i/84Eov9EkSL/zgUMgoSRIv/OAAxABJEi/84EYv+EkSJJwU2GgIXNhoBF8AwMRYiCUk4ECQSRIgAAiJDigQANjIAKGVMSESI/p1EKmQjUxRBAAkqIicKI08CVGeL/ShkNQA0AFcACBcLjPyL/zgSi/wSRIv/OBQyChJEi/84ADEAEkSL/zgRi/4SRImIAAIiQ4oAADYyAChlTEhEiP5IRChkNQA0AFcoCBcyBw1EiYgAAiJDigAANjIAKGVMSEQoZDUANABXIAgXMgcNRIj+FxREiYgAAiJDigAANjIAKGVMSEQxACcEZBJEKGQ1ADQAVygIFzIHDUSJNhoBF8AwiAACIkOKAQA2MgAoZUxIRDEAJwRkEkQoZDUANABXKAgXMgcNRIk2GgIXwDA2GgFJFSISRCNTiAACIkOKAgA2MgAoZUxIRChkNQA0AFcgCBcyBw1EMQArZHAARCINRIABdjEAUL1MSBREJwgnCGQiCGeL/0EACCcJJwlkIghniYgAAiJDigAAJwlkFicIZBZQKUxQsImIAAIiQ4oAACtkFilMULCJiAACIkOKAAAnBmQWKUxQsImIAAIiQ4oAACcHZBYpTFCwiYgAAiJDigAAKGQpTFCwiYgAAiJDigAAgA92ZXN0aW5nU2NoZWR1bGVkKUxQsImABLhEezY2GgCOAfzJAIAEhxdlE4AEpiJIjoAEA0uF4YAE8Vd3JoAEoQ1ZD4AELYsI8YAEd+BpI4AEQJjD9oAEwd81AYAELqfumYAEkb2xcoAEFHwIO4AEENUMwIAERjq40TYaAI4O/J79Sf2q/hX+OP5c/oL+rv8H/x3/Lf8+/0//XgCKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==
	itxn_field ApprovalProgram

	// contracts/campaign/campaign.algo.ts:317
	// globalNumByteSlice: 6
	int 6
	itxn_field GlobalNumByteSlice

	// contracts/campaign/campaign.algo.ts:318
	// globalNumUint: 3
	int 3
	itxn_field GlobalNumUint

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/campaign/campaign.algo.ts:321
	// campaignApp = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury -11 // campaignApp: application

	// contracts/campaign/campaign.algo.ts:323
	// sendPayment({
	//       amount: 300_000,
	//       receiver: campaignApp.address,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:324
	// amount: 300_000
	int 300_000
	itxn_field Amount

	// contracts/campaign/campaign.algo.ts:325
	// receiver: campaignApp.address
	frame_dig -11 // campaignApp: application
	app_params_get AppAddress
	assert
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// if0_condition
	// contracts/campaign/campaign.algo.ts:327
	// this.algohubCampaigns.exists
	txna Applications 0
	byte 0x616c676f68756243616d706169676e73 // "algohubCampaigns"
	app_global_get_ex
	swap
	pop
	bz if0_else

	// if0_consequent
	// contracts/campaign/campaign.algo.ts:328
	// this.algohubCampaigns.value.push(campaignApp)
	byte 0x616c676f68756243616d706169676e73 // "algohubCampaigns"
	app_global_get
	extract 2 0
	frame_dig -11 // campaignApp: application
	itob
	concat
	byte 0x616c676f68756243616d706169676e73 // "algohubCampaigns"
	swap
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put
	b if0_end

if0_else:
	// contracts/campaign/campaign.algo.ts:330
	// newApp: Application[] = [campaignApp]
	frame_dig -11 // campaignApp: application
	itob
	frame_bury -12 // newApp: application[]

	// contracts/campaign/campaign.algo.ts:331
	// this.algohubCampaigns.value = newApp
	byte 0x616c676f68756243616d706169676e73 // "algohubCampaigns"
	frame_dig -12 // newApp: application[]
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

if0_end:
	// contracts/campaign/campaign.algo.ts:334
	// sendMethodCall<[Account, Asset, Asset, Asset, number, number, number, number, number, number, string], void>({
	//       applicationID: campaignApp,
	//       name: 'createCampaign',
	//       methodArgs: [
	//         adminAccount,
	//         this.votersAsaId.value,
	//         idoAsa,
	//         buyAsa,
	//         price,
	//         maxBuyCap,
	//         softCap,
	//         hardCap,
	//         this.votingPeriod.value,
	//         duration,
	//         metadataUrl,
	//       ],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "createCampaign(account,asset,asset,asset,uint64,uint64,uint64,uint64,uint64,uint64,string)void"
	itxn_field ApplicationArgs

	// contracts/campaign/campaign.algo.ts:335
	// applicationID: campaignApp
	frame_dig -11 // campaignApp: application
	itxn_field ApplicationID

	// contracts/campaign/campaign.algo.ts:337
	// methodArgs: [
	//         adminAccount,
	//         this.votersAsaId.value,
	//         idoAsa,
	//         buyAsa,
	//         price,
	//         maxBuyCap,
	//         softCap,
	//         hardCap,
	//         this.votingPeriod.value,
	//         duration,
	//         metadataUrl,
	//       ]
	frame_dig -2 // adminAccount: account
	itxn_field Accounts
	byte 0x0000000000000001
	itxn_field ApplicationArgs
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	itxn_field Assets
	byte 0x0000000000000000
	itxn_field ApplicationArgs
	frame_dig -3 // idoAsa: asset
	itxn_field Assets
	byte 0x0000000000000001
	itxn_field ApplicationArgs
	frame_dig -4 // buyAsa: asset
	itxn_field Assets
	byte 0x0000000000000002
	itxn_field ApplicationArgs
	frame_dig -5 // price: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -6 // maxBuyCap: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -7 // softCap: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -8 // hardCap: uint64
	itob
	itxn_field ApplicationArgs
	byte 0x766f74696e67506572696f64 // "votingPeriod"
	app_global_get
	itob
	itxn_field ApplicationArgs
	frame_dig -9 // duration: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -10 // metadataUrl: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/campaign/campaign.algo.ts:352
	// return campaignApp;
	frame_dig -11 // campaignApp: application
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// registerAsVoter(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_registerAsVoter:
	// votersAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute registerAsVoter(asset)void
	callsub registerAsVoter
	int 1
	return

registerAsVoter:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:357
	// assert(this.votersAsaId.exists)
	txna Applications 0
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:358
	// assert(this.txn.sender.assetBalance(this.votersAsaId.value) === 0)
	txn Sender
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 0
	==
	assert

	// contracts/campaign/campaign.algo.ts:359
	// assert(this.txn.sender.balance >= this.algoToVoteRation.value)
	txn Sender
	acct_params_get AcctBalance
	assert
	byte 0x616c676f546f566f7465526174696f6e // "algoToVoteRation"
	app_global_get
	>=
	assert

	// contracts/campaign/campaign.algo.ts:361
	// sendAssetTransfer({
	//       xferAsset: this.votersAsaId.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:362
	// xferAsset: this.votersAsaId.value
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:363
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:364
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/campaign/campaign.algo.ts:367
	// sendAssetFreeze({
	//       freezeAsset: this.votersAsaId.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:368
	// freezeAsset: this.votersAsaId.value
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	itxn_field FreezeAsset

	// contracts/campaign/campaign.algo.ts:369
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/campaign/campaign.algo.ts:370
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/campaign/campaign.algo.ts:373
	// this.totalVotes.value = this.totalVotes.value + 1
	byte 0x746f74616c566f746573 // "totalVotes"
	byte 0x746f74616c566f746573 // "totalVotes"
	app_global_get
	int 1
	+
	app_global_put
	retsub

// unregisterAsVoter(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_unregisterAsVoter:
	// votersAsa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute unregisterAsVoter(asset)void
	callsub unregisterAsVoter
	int 1
	return

unregisterAsVoter:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:378
	// assert(this.votersAsaId.exists)
	txna Applications 0
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get_ex
	swap
	pop
	assert

	// contracts/campaign/campaign.algo.ts:379
	// assert(this.txn.sender.hasAsset(this.votersAsaId.value) === 1)
	txn Sender
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	int 1
	==
	assert

	// contracts/campaign/campaign.algo.ts:381
	// sendAssetFreeze({
	//       freezeAsset: this.votersAsaId.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: false,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:382
	// freezeAsset: this.votersAsaId.value
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	itxn_field FreezeAsset

	// contracts/campaign/campaign.algo.ts:383
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/campaign/campaign.algo.ts:384
	// freezeAssetFrozen: false
	int 0
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/campaign/campaign.algo.ts:387
	// sendAssetTransfer({
	//       assetSender: this.txn.sender,
	//       xferAsset: this.votersAsaId.value,
	//       assetReceiver: this.app.address,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/campaign/campaign.algo.ts:388
	// assetSender: this.txn.sender
	txn Sender
	itxn_field AssetSender

	// contracts/campaign/campaign.algo.ts:389
	// xferAsset: this.votersAsaId.value
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/campaign/campaign.algo.ts:390
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/campaign/campaign.algo.ts:391
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/campaign/campaign.algo.ts:394
	// this.totalVotes.value = this.totalVotes.value - 1
	byte 0x746f74616c566f746573 // "totalVotes"
	byte 0x746f74616c566f746573 // "totalVotes"
	app_global_get
	int 1
	-
	app_global_put

	// contracts/campaign/campaign.algo.ts:395
	// this.vipVoters(this.txn.sender).value = false
	txn Sender
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// ========================
// ==== Getter Methods ====
// ========================
// getAllCampaignApps()application[]
//
// /// ========================
abi_route_getAllCampaignApps:
	// execute getAllCampaignApps()application[]
	callsub getAllCampaignApps
	int 1
	return

getAllCampaignApps:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:402
	// return this.algohubCampaigns.exists ? this.algohubCampaigns.value : [];
	txna Applications 0
	byte 0x616c676f68756243616d706169676e73 // "algohubCampaigns"
	app_global_get_ex
	swap
	pop
	bz ternary0_false
	byte 0x616c676f68756243616d706169676e73 // "algohubCampaigns"
	app_global_get
	extract 2 0
	b ternary0_end

ternary0_false:
	byte 0x

ternary0_end:
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotersDetails()(uint64,uint64,uint64)
abi_route_getVotersDetails:
	// execute getVotersDetails()(uint64,uint64,uint64)
	callsub getVotersDetails
	int 1
	return

getVotersDetails:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:406
	// return {
	//       algoToVoteRation: this.algoToVoteRation.value,
	//       vipVoteWeight: this.vipVoteWeight.value,
	//       totalVotes: this.totalVotes.value,
	//     };
	byte 0x616c676f546f566f7465526174696f6e // "algoToVoteRation"
	app_global_get
	itob
	byte 0x766970566f7465576569676874 // "vipVoteWeight"
	app_global_get
	itob
	concat
	byte 0x746f74616c566f746573 // "totalVotes"
	app_global_get
	itob
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotePower(asset,account)uint64
//
// // eslint-disable-next-line no-unused-vars
abi_route_getVotePower:
	// votersAsa: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getVotePower(asset,account)uint64
	callsub getVotePower
	int 1
	return

getVotePower:
	proto 2 0

	// if1_condition
	// contracts/campaign/campaign.algo.ts:415
	// account.hasAsset(this.votersAsaId.value) === 0
	frame_dig -1 // account: account
	byte 0x766f746572734173614964 // "votersAsaId"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	int 0
	==
	bz if1_end

	// if1_consequent
	// contracts/campaign/campaign.algo.ts:415
	// return 0;
	byte 0x151f7c750000000000000000
	log
	retsub

if1_end:
	// if2_condition
	// contracts/campaign/campaign.algo.ts:416
	// this.vipVoters(account).value
	frame_dig -1 // account: account
	app_global_get
	int 0
	getbit
	bz if2_end

	// if2_consequent
	// contracts/campaign/campaign.algo.ts:416
	// return 125;
	byte 0x151f7c75000000000000007d
	log
	retsub

if2_end:
	// contracts/campaign/campaign.algo.ts:417
	// return 100;
	byte 0x151f7c750000000000000064
	log
	retsub

// getVotingPeriod()uint64
abi_route_getVotingPeriod:
	// execute getVotingPeriod()uint64
	callsub getVotingPeriod
	int 1
	return

getVotingPeriod:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:421
	// return this.votingPeriod.value;
	byte 0x766f74696e67506572696f64 // "votingPeriod"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getTotalVoters()uint64
abi_route_getTotalVoters:
	// execute getTotalVoters()uint64
	callsub getTotalVoters
	int 1
	return

getTotalVoters:
	proto 0 0

	// contracts/campaign/campaign.algo.ts:425
	// return this.totalVotes.value;
	byte 0x746f74616c566f746573 // "totalVotes"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVipStatus(account)bool
abi_route_getVipStatus:
	// account: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute getVipStatus(account)bool
	callsub getVipStatus
	int 1
	return

getVipStatus:
	proto 1 0

	// contracts/campaign/campaign.algo.ts:429
	// return this.vipVoters(account).value;
	frame_dig -1 // account: account
	app_global_get
	int 0
	getbit
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap(uint64)uint64"
	method "setVipStatus(account,bool,asset)void"
	method "createCampaign(asset,account,asset,asset,uint64,uint64,uint64,uint64,uint64,string)uint64"
	method "registerAsVoter(asset)void"
	method "unregisterAsVoter(asset)void"
	method "getAllCampaignApps()uint64[]"
	method "getVotersDetails()(uint64,uint64,uint64)"
	method "getVotePower(account,asset)uint64"
	method "getVotingPeriod()uint64"
	method "getTotalVoters()uint64"
	method "getVipStatus(account)bool"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_setVipStatus abi_route_createCampaign abi_route_registerAsVoter abi_route_unregisterAsVoter abi_route_getAllCampaignApps abi_route_getVotersDetails abi_route_getVotePower abi_route_getVotingPeriod abi_route_getTotalVoters abi_route_getVipStatus
	err