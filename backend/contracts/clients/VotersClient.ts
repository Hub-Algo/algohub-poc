/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE",
        "opt_in": "CREATE"
      }
    },
    "bootstrap(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "closeOutOfApplication(asset)void": {
      "call_config": {
        "close_out": "CALL"
      }
    },
    "getVotersDetails()(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVotePower(address,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTotalVoters()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVIPStatus(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setVIPStatus(address,bool,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "votersAsaId": {
          "type": "uint64",
          "key": "votersAsaId"
        },
        "algoToVoteRation": {
          "type": "uint64",
          "key": "algoToVoteRation"
        },
        "vipVoteWeight": {
          "type": "uint64",
          "key": "vipVoteWeight"
        },
        "totalVotes": {
          "type": "uint64",
          "key": "totalVotes"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 50,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Voters",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "algoToVoteRatio",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "vipVoteWeight",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "voteAsaTotal",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "register",
        "args": [
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "closeOutOfApplication",
        "args": [
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getVotersDetails",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": ""
        }
      },
      {
        "name": "getVotePower",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": ""
          },
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getTotalVoters",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getVIPStatus",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "bool",
          "desc": ""
        }
      },
      {
        "name": "setVIPStatus",
        "args": [
          {
            "name": "account",
            "type": "address",
            "desc": ""
          },
          {
            "name": "isVIP",
            "type": "bool",
            "desc": ""
          },
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Voters smart contract.
 */
export type Voters = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64)void' | 'createApplication', {
      argsObj: {
        algoToVoteRatio: bigint | number
        vipVoteWeight: bigint | number
      }
      argsTuple: [algoToVoteRatio: bigint | number, vipVoteWeight: bigint | number]
      returns: void
    }>
    & Record<'bootstrap(uint64)uint64' | 'bootstrap', {
      argsObj: {
        voteAsaTotal: bigint | number
      }
      argsTuple: [voteAsaTotal: bigint | number]
      returns: bigint
    }>
    & Record<'register(asset)void' | 'register', {
      argsObj: {
        votersAsa: number | bigint
      }
      argsTuple: [votersAsa: number | bigint]
      returns: void
    }>
    & Record<'closeOutOfApplication(asset)void' | 'closeOutOfApplication', {
      argsObj: {
        votersAsa: number | bigint
      }
      argsTuple: [votersAsa: number | bigint]
      returns: void
    }>
    & Record<'getVotersDetails()(uint64,uint64,uint64)' | 'getVotersDetails', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint, bigint, bigint]
    }>
    & Record<'getVotePower(address,asset)uint64' | 'getVotePower', {
      argsObj: {
        account: string
        votersAsa: number | bigint
      }
      argsTuple: [account: string, votersAsa: number | bigint]
      returns: bigint
    }>
    & Record<'getTotalVoters()uint64' | 'getTotalVoters', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getVIPStatus(address)bool' | 'getVIPStatus', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: boolean
    }>
    & Record<'setVIPStatus(address,bool,asset)void' | 'setVIPStatus', {
      argsObj: {
        account: string
        isVIP: boolean
        votersAsa: number | bigint
      }
      argsTuple: [account: string, isVIP: boolean, votersAsa: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'votersAsaId'?: IntegerState
      'algoToVoteRation'?: IntegerState
      'vipVoteWeight'?: IntegerState
      'totalVotes'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VotersSig = keyof Voters['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VotersSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Voters smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VotersSig> = Voters['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Voters smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VotersSig> = Voters['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VotersCreateCalls = (typeof VotersCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VotersCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,uint64)void'> & (OnCompleteNoOp | OnCompleteOptIn))
/**
 * Defines arguments required for the deploy method.
 */
export type VotersDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VotersCreateCalls) => VotersCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VotersCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Voters smart contract using the createApplication(uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp | OnCompleteOptIn) = {}) {
        return {
          method: 'createApplication(uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.algoToVoteRatio, args.vipVoteWeight],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available closeOut call factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs a close out call for the Voters smart contract using the closeOutOfApplication(asset)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      closeOutOfApplication(args: MethodArgs<'closeOutOfApplication(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'closeOutOfApplication(asset)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.votersAsa],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteAsaTotal],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static register(args: MethodArgs<'register(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.votersAsa],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVotersDetails()(uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVotersDetails(args: MethodArgs<'getVotersDetails()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVotersDetails()(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVotePower(address,asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVotePower(args: MethodArgs<'getVotePower(address,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVotePower(address,asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.votersAsa],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getTotalVoters()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTotalVoters(args: MethodArgs<'getTotalVoters()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getTotalVoters()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVIPStatus(address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVipStatus(args: MethodArgs<'getVIPStatus(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVIPStatus(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setVIPStatus(address,bool,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVipStatus(args: MethodArgs<'setVIPStatus(address,bool,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setVIPStatus(address,bool,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.isVIP, args.votersAsa],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Voters smart contract
 */
export class VotersClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VotersClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Voters['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Voters smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VotersDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VotersCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Voters smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp | OnCompleteOptIn) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(uint64,uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(VotersCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available closeOut methods
   */
  public get closeOut() {
    const $this = this
    return {
      /**
       * Makes a close out call to an existing instance of the Voters smart contract using the closeOutOfApplication(asset)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The closeOut result
       */
      async closeOutOfApplication(args: MethodArgs<'closeOutOfApplication(asset)void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'closeOutOfApplication(asset)void'>>> {
        return $this.mapReturnValue(await $this.appClient.closeOut(VotersCallFactory.closeOut.closeOutOfApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Voters smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the register(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public register(args: MethodArgs<'register(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.register(args, params))
  }

  /**
   * Calls the getVotersDetails()(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVotersDetails(args: MethodArgs<'getVotersDetails()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.getVotersDetails(args, params))
  }

  /**
   * Calls the getVotePower(address,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVotePower(args: MethodArgs<'getVotePower(address,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.getVotePower(args, params))
  }

  /**
   * Calls the getTotalVoters()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTotalVoters(args: MethodArgs<'getTotalVoters()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.getTotalVoters(args, params))
  }

  /**
   * Calls the getVIPStatus(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVipStatus(args: MethodArgs<'getVIPStatus(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.getVipStatus(args, params))
  }

  /**
   * Calls the setVIPStatus(address,bool,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVipStatus(args: MethodArgs<'setVIPStatus(address,bool,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VotersCallFactory.setVipStatus(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Voters['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get votersAsaId() {
        return VotersClient.getIntegerState(state, 'votersAsaId')
      },
      get algoToVoteRation() {
        return VotersClient.getIntegerState(state, 'algoToVoteRation')
      },
      get vipVoteWeight() {
        return VotersClient.getIntegerState(state, 'vipVoteWeight')
      },
      get totalVotes() {
        return VotersClient.getIntegerState(state, 'totalVotes')
      },
    }
  }

  public compose(): VotersComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      register(args: MethodArgs<'register(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.register(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVotersDetails(args: MethodArgs<'getVotersDetails()(uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVotersDetails(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVotePower(args: MethodArgs<'getVotePower(address,asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVotePower(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTotalVoters(args: MethodArgs<'getTotalVoters()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTotalVoters(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVipStatus(args: MethodArgs<'getVIPStatus(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVipStatus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVipStatus(args: MethodArgs<'setVIPStatus(address,bool,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVipStatus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get closeOut() {
        const $this = this
        return {
          closeOutOfApplication(args: MethodArgs<'closeOutOfApplication(asset)void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.closeOut.closeOutOfApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VotersComposer
  }
}
export type VotersComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'bootstrap(uint64)uint64'>]>

  /**
   * Calls the register(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(args: MethodArgs<'register(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'register(asset)void'>]>

  /**
   * Calls the getVotersDetails()(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVotersDetails(args: MethodArgs<'getVotersDetails()(uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'getVotersDetails()(uint64,uint64,uint64)'>]>

  /**
   * Calls the getVotePower(address,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVotePower(args: MethodArgs<'getVotePower(address,asset)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'getVotePower(address,asset)uint64'>]>

  /**
   * Calls the getTotalVoters()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalVoters(args: MethodArgs<'getTotalVoters()uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'getTotalVoters()uint64'>]>

  /**
   * Calls the getVIPStatus(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVipStatus(args: MethodArgs<'getVIPStatus(address)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'getVIPStatus(address)bool'>]>

  /**
   * Calls the setVIPStatus(address,bool,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVipStatus(args: MethodArgs<'setVIPStatus(address,bool,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, MethodReturn<'setVIPStatus(address,bool,asset)void'>]>

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the Voters smart contract using the closeOutOfApplication(asset)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    closeOutOfApplication(args: MethodArgs<'closeOutOfApplication(asset)void'>, params?: AppClientCallCoreParams): VotersComposer<[...TReturns, MethodReturn<'closeOutOfApplication(asset)void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Voters smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): VotersComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VotersComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<VotersComposerResults<TReturns>>
}
export type VotersComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
