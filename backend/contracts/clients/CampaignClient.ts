/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buy()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawPurchase()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawIdoAsa()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawSales()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote(bool,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVestingSchedule()(uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "idoAsaId": {
          "type": "uint64",
          "key": "idoAsaId"
        },
        "buyAsaId": {
          "type": "uint64",
          "key": "buyAsaId"
        },
        "votersAsaId": {
          "type": "uint64",
          "key": "votersAsaId"
        },
        "votesTotal": {
          "type": "uint64",
          "key": "votesTotal"
        },
        "votesInFavor": {
          "type": "uint64",
          "key": "votesInFavor"
        },
        "campaign": {
          "type": "bytes",
          "key": "campaign"
        },
        "vestingSchedule": {
          "type": "bytes",
          "key": "vestingSchedule"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Campaign",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createCampaign",
        "args": [
          {
            "name": "price",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "maxBuyCap",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "softCap",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "hardCap",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "startTime",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "endTime",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "metadataUrl",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "buy",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "claim",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdrawPurchase",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdrawIdoAsa",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdrawSales",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "vote",
        "args": [
          {
            "name": "inFavor",
            "type": "bool",
            "desc": ""
          },
          {
            "name": "votersAsa",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getCampaign",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,string)",
          "desc": ""
        }
      },
      {
        "name": "getVestingSchedule",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint64)",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Campaign smart contract.
 */
export type Campaign = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void' | 'createCampaign', {
      argsObj: {
        price: bigint | number
        maxBuyCap: bigint | number
        softCap: bigint | number
        hardCap: bigint | number
        startTime: bigint | number
        endTime: bigint | number
        metadataUrl: string
      }
      argsTuple: [price: bigint | number, maxBuyCap: bigint | number, softCap: bigint | number, hardCap: bigint | number, startTime: bigint | number, endTime: bigint | number, metadataUrl: string]
      returns: void
    }>
    & Record<'buy()void' | 'buy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'claim()void' | 'claim', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdrawPurchase()void' | 'withdrawPurchase', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdrawIdoAsa()void' | 'withdrawIdoAsa', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'withdrawSales()void' | 'withdrawSales', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'vote(bool,asset)void' | 'vote', {
      argsObj: {
        inFavor: boolean
        votersAsa: number | bigint
      }
      argsTuple: [inFavor: boolean, votersAsa: number | bigint]
      returns: void
    }>
    & Record<'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)' | 'getCampaign', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint, bigint, bigint, bigint, bigint, bigint, string]
    }>
    & Record<'getVestingSchedule()(uint64)' | 'getVestingSchedule', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint]
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'idoAsaId'?: IntegerState
      'buyAsaId'?: IntegerState
      'votersAsaId'?: IntegerState
      'votesTotal'?: IntegerState
      'votesInFavor'?: IntegerState
      'campaign'?: BinaryState
      'vestingSchedule'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CampaignSig = keyof Campaign['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CampaignSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Campaign smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CampaignSig> = Campaign['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Campaign smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CampaignSig> = Campaign['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CampaignCreateCalls = (typeof CampaignCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CampaignCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CampaignDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CampaignCreateCalls) => CampaignCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CampaignCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Campaign smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
      /**
       * Constructs a create call for the Campaign smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createCampaign(args: MethodArgs<'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.price, args.maxBuyCap, args.softCap, args.hardCap, args.startTime, args.endTime, args.metadataUrl],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buy()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buy(args: MethodArgs<'buy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buy()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claim(args: MethodArgs<'claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawPurchase()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawPurchase(args: MethodArgs<'withdrawPurchase()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawPurchase()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawIdoAsa()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawIdoAsa(args: MethodArgs<'withdrawIdoAsa()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawIdoAsa()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawSales()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawSales(args: MethodArgs<'withdrawSales()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawSales()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote(bool,asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static vote(args: MethodArgs<'vote(bool,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote(bool,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.inFavor, args.votersAsa],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCampaign(args: MethodArgs<'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVestingSchedule()(uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVestingSchedule(args: MethodArgs<'getVestingSchedule()(uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVestingSchedule()(uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Campaign smart contract
 */
export class CampaignClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CampaignClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Campaign['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Campaign smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CampaignDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CampaignCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Campaign smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
      /**
       * Creates a new instance of the Campaign smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(CampaignCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Campaign smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createCampaign(args: MethodArgs<'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.createCampaign(args, params))
  }

  /**
   * Calls the buy()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buy(args: MethodArgs<'buy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.buy(args, params))
  }

  /**
   * Calls the claim()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claim(args: MethodArgs<'claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.claim(args, params))
  }

  /**
   * Calls the withdrawPurchase()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawPurchase(args: MethodArgs<'withdrawPurchase()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.withdrawPurchase(args, params))
  }

  /**
   * Calls the withdrawIdoAsa()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawIdoAsa(args: MethodArgs<'withdrawIdoAsa()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.withdrawIdoAsa(args, params))
  }

  /**
   * Calls the withdrawSales()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawSales(args: MethodArgs<'withdrawSales()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.withdrawSales(args, params))
  }

  /**
   * Calls the vote(bool,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public vote(args: MethodArgs<'vote(bool,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.vote(args, params))
  }

  /**
   * Calls the getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCampaign(args: MethodArgs<'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.getCampaign(args, params))
  }

  /**
   * Calls the getVestingSchedule()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVestingSchedule(args: MethodArgs<'getVestingSchedule()(uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CampaignCallFactory.getVestingSchedule(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Campaign['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get idoAsaId() {
        return CampaignClient.getIntegerState(state, 'idoAsaId')
      },
      get buyAsaId() {
        return CampaignClient.getIntegerState(state, 'buyAsaId')
      },
      get votersAsaId() {
        return CampaignClient.getIntegerState(state, 'votersAsaId')
      },
      get votesTotal() {
        return CampaignClient.getIntegerState(state, 'votesTotal')
      },
      get votesInFavor() {
        return CampaignClient.getIntegerState(state, 'votesInFavor')
      },
      get campaign() {
        return CampaignClient.getBinaryState(state, 'campaign')
      },
      get vestingSchedule() {
        return CampaignClient.getBinaryState(state, 'vestingSchedule')
      },
    }
  }

  public compose(): CampaignComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createCampaign(args: MethodArgs<'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createCampaign(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buy(args: MethodArgs<'buy()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claim(args: MethodArgs<'claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawPurchase(args: MethodArgs<'withdrawPurchase()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawPurchase(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawIdoAsa(args: MethodArgs<'withdrawIdoAsa()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawIdoAsa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawSales(args: MethodArgs<'withdrawSales()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawSales(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      vote(args: MethodArgs<'vote(bool,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.vote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getCampaign(args: MethodArgs<'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCampaign(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVestingSchedule(args: MethodArgs<'getVestingSchedule()(uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVestingSchedule(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CampaignComposer
  }
}
export type CampaignComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createCampaign(args: MethodArgs<'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'createCampaign(uint64,uint64,uint64,uint64,uint64,uint64,string)void'>]>

  /**
   * Calls the buy()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(args: MethodArgs<'buy()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'buy()void'>]>

  /**
   * Calls the claim()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claim(args: MethodArgs<'claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'claim()void'>]>

  /**
   * Calls the withdrawPurchase()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawPurchase(args: MethodArgs<'withdrawPurchase()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'withdrawPurchase()void'>]>

  /**
   * Calls the withdrawIdoAsa()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawIdoAsa(args: MethodArgs<'withdrawIdoAsa()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'withdrawIdoAsa()void'>]>

  /**
   * Calls the withdrawSales()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawSales(args: MethodArgs<'withdrawSales()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'withdrawSales()void'>]>

  /**
   * Calls the vote(bool,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(args: MethodArgs<'vote(bool,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'vote(bool,asset)void'>]>

  /**
   * Calls the getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCampaign(args: MethodArgs<'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'getCampaign()(uint64,uint64,uint64,uint64,uint64,uint64,string)'>]>

  /**
   * Calls the getVestingSchedule()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVestingSchedule(args: MethodArgs<'getVestingSchedule()(uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, MethodReturn<'getVestingSchedule()(uint64)'>]>

  /**
   * Makes a clear_state call to an existing instance of the Campaign smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CampaignComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CampaignComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<CampaignComposerResults<TReturns>>
}
export type CampaignComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
